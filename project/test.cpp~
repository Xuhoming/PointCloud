#include <pcl/io/pcd_io.h>
#include <ctime>
#include <Eigen/Core>
#include <pcl/point_types.h>
#include <pcl/point_cloud.h>
#include <pcl/features/fpfh.h>
#include <pcl/registration/ia_ransac.h>
#include <pcl/features/normal_3d.h>
#include <pcl/kdtree/kdtree_flann.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <boost/thread/thread.hpp>
#include <pcl/registration/icp.h>
#include <pcl/features/fpfh_omp.h> //包含fpfh加速计算的omp(多核并行计算)
#include <pcl/registration/correspondence_estimation.h>
#include <pcl/registration/correspondence_rejection_features.h> //特征的错误对应关系去除
#include <pcl/registration/correspondence_rejection_sample_consensus.h> //随机采样一致性去除
#include <pcl/filters/voxel_grid.h>
#include <pcl/filters/approximate_voxel_grid.h>
#include <pcl/keypoints/sift_keypoint.h>
#include <pcl/console/time.h>
#include <pcl/kdtree/kdtree_flann.h>
#include <pcl/filters/extract_indices.h>
#include <pcl/PointIndices.h>
using namespace std;

typedef pcl::PointCloud<pcl::PointXYZ> pointcloud;
typedef pcl::PointCloud<pcl::Normal> pointnormal;
typedef pcl::PointCloud<pcl::FPFHSignature33> fpfhFeature;

namespace pcl
{
        template<>
        struct SIFTKeypointFieldSelector<PointXYZ>
        {
                inline float
                operator ()(const PointXYZ &p) const
                        {
                                return p.z;
                                
                        }
        };
}

//写一个函数，测试特征点的个数
int nFeature(pointcloud::Ptr &cloudin,float f)
{
        pcl::KdTreeFLANN<pcl::PointXYZ> kdtree; //创建KDtree
        kdtree.setInputCloud (cloudin);
        int k = 2;
        float density = 0;

        for (int i =0; i < cloudin->size();i++)
        {
                float everagedistance =0;
                vector<int> nnh ;
                vector<float> squaredistance;
                kdtree.nearestKSearch(cloudin->points[i],k,nnh,squaredistance);
                for(int j =1;j<k;j++)
                {
                        
                        everagedistance += sqrt(squaredistance[j]);
                }
                everagedistance = everagedistance/(k-1);
                
                density += everagedistance;
        }
        
        density = density/(cloudin->size());
        cout<<"everage distance is : "<<density<<endl;


        float threshold  = f*density;
        int n =0 ;
        int N = 2;
        for (int i = 0; i < cloudin->size();i++)
        {
                vector<int> nnh ;
                vector<float> squaredistance;
                float distance = 0;
                
                kdtree.nearestKSearch(cloudin->points[i],N,nnh,squaredistance);
                for(int j = 1;j<N;j++)
                {
                        distance += sqrt(squaredistance[j]);
                }
                distance = distance/(N-1);
                if(distance<threshold)
                        n++;
        }

        cout<<f<<"所对应的特征点个数是:"<<n<<endl;
        return n;
        
}






//获得点的索引,方法一：遍历
/*
void getIndices (pointcloud::Ptr cloudin, pointcloud keypoints, pcl::PointIndices::Ptr indices)
{
        for (int i = 0; i < keypoints.size();i++)
        {
                for (int j = 0;j < cloudin->size();j++)
                {
                        if (cloudin->points[j].x == keypoints.points[i].x && cloudin->points[j].y == keypoints.points[i].y &&  cloudin->points[j].z == keypoints.points[i].z     )
                        // if ( (cloudin->points[j].x - keypoints.points[i].x)<std::numeric_limits<double>::min)() && (cloudin->points[j].y - keypoints.points[i].y)<std::numeric_limits<double>::min)() && ( cloudin->points[j].z == keypoints.points[i].z)<numeric_limits<double>::min)()     )
                                
                                indices->indices.push_back(j);
                }
        }
}
*/
//获得点的索引,方法二：利用KDtree，最近点距离为0即可.

void getIndices (pointcloud::Ptr &cloudin, pointcloud &keypoints, pcl::PointIndices::Ptr indices) //形参前面加&，表示该参数为引用。在内存中不产生实参的副本，相当于直接对实参做相应计算
{
        pcl::KdTreeFLANN<pcl::PointXYZ> kdtree;
        kdtree.setInputCloud(cloudin);
        std::vector<float>pointNKNSquareDistance; //近邻点集的距离
        std::vector<int> pointIdxNKNSearch;

        for (size_t i =0; i < keypoints.size();i++)
        {
                kdtree.nearestKSearch(keypoints.points[i],1,pointIdxNKNSearch,pointNKNSquareDistance);
                // cout<<"the distance is:"<<pointNKNSquareDistance[0]<<endl;
                // cout<<"the indieces is:"<<pointIdxNKNSearch[0]<<endl;
                
                indices->indices.push_back(pointIdxNKNSearch[0]);
                
        }

}


int main (int argc, char **argv)
{
        if (argc < 3)
        {
                cout<<"please input two pointcloud"<<endl;
                return -1;
        }
        
        clock_t start,end,time,finish,all,end1; //统计的是cpu的运行时间，和下边pcl统计时间是重复的，pcl::console统计的也是cpu的时间
        start  = clock();
        pointcloud::Ptr source (new pointcloud);
        pointcloud::Ptr target (new pointcloud);
        pcl::io::loadPCDFile(argv[1],*source);
        pcl::io::loadPCDFile(argv[2],*target);
        cout<<"sources size is: "<<source->size()<<endl;
        cout<<"target  size is: "<<target->size()<<endl;

#if 0
        int N = 0;
        float threshold[]  ={0.9,1,1.2,1.3,1.4};
        for(int i = 0;i<5;i++)
        {
                float f = threshold[i];
                N = nFeature(source,f);
        }
#endif 
        
        
        //N = nFeature(source,threshold);
        // cout<<"特征点个数是："<<N<<endl;
        


#if 1
        
        /*
        pcl::VoxelGrid<pcl::PointXYZ> approximate_voxel_grid;
        approximate_voxel_grid.setLeafSize(0.5,0.5,0.5); //这里的数值越大，则精简的越厉害（剩下的数据少）
        pointcloud::Ptr sample_source (new pointcloud);
        pointcloud::Ptr sample_target (new pointcloud);
        
        approximate_voxel_grid.setInputCloud(source);
        approximate_voxel_grid.filter(*sample_source);
        cout << "source voxel grid  Filte cloud size is " << sample_source->size()<<endl;
        // pcl::io::savePCDFile("voxelgrid.pcd",*out);

        approximate_voxel_grid.setInputCloud(target);
        approximate_voxel_grid.filter(*sample_target);
        */
        
        pcl::search::KdTree<pcl::PointXYZ>::Ptr tree (new pcl::search::KdTree<pcl::PointXYZ> ());
     
        /*..sift 特征点计算..*/
        const float min_scale = 0.0011; //尺度空间中最小尺度的标准偏差。该值越小，sift关键点越多(没有必然关系)
        const int n_octaves = 6 ; //此值越大，sift点越多，但是计算速度明显减慢
        const int n_scales_per_octave = 6;//越大，sift越多，速度减慢
        const float min_contrast = 0.00008f; ///the minimum contrast required for detection检测所需的最小对比度
        const int k_search = 20;
        
        // pcl::SIFTKeypoint<pcl::PointXYZ,pcl::PointWithScale> sift;
        
        pcl::SIFTKeypoint<pcl::PointXYZ,pcl::PointXYZ> sift;
        pointcloud source_sift;
        pointcloud target_sift;
        
        sift.setSearchMethod(tree);
        sift.setKSearch(k_search);
        sift.setScales(min_scale,n_octaves,n_scales_per_octave); //第一个参数：点云体素尺度空间中的标准偏差，点云对应体素栅格中体素的最小尺寸;第二个参数：检测关键点时体素空间尺度的数目; 第三个参数：每一个体素空间尺度下计算高斯空间尺度的参数
        sift.setMinimumContrast(min_contrast);  //设置候选关键点时应有的对比度下限。该值设置越小，检测的关键点越多
        sift.setInputCloud(source);
        sift.compute(source_sift);

        sift.setInputCloud(target);
        sift.compute(target_sift);

        finish = clock();

        /*
        //  pcl::IndicesPtr sift_indices = sift.getIndices();
        */
        pcl::PointIndices::Ptr source_sift_indices (new pcl::PointIndices);
        pcl::PointIndices::Ptr target_sift_indices (new pcl::PointIndices);
        getIndices(source,source_sift,source_sift_indices);
        getIndices(target,target_sift,target_sift_indices);

        cout<<"\nsources indeces size is:"<<source_sift_indices->indices.size()<<endl;
        // cout<<"fisrst is ::"<<source_sift_indices->indices[0]<<endl;

        end1 = clock();
        cout <<"calculate crude registration time is: "<< float (end1-start)/CLOCKS_PER_SEC<<endl;
      
        
        cout<<"\nsift poinst in the source is："<<source_sift.size()<<endl;
        cout<<"sift poinst in the target is："<<target_sift.size()<<endl;
        cout<<"computing the sift points time is: "<<float (finish-start)/CLOCKS_PER_SEC<<endl;

        //      return -1;
        
        
        
           //计算源点云的法向量
        pointnormal::Ptr source_sift_normal (new pointnormal);
        pointnormal::Ptr target_sift_normal (new pointnormal);
        
        // pcl::NormalEstimation<pcl::PointXYZ,pcl::Normal> norm_source;
        pcl::NormalEstimation<pcl::PointXYZ,pcl::Normal> normal_est;

        normal_est.setIndices(source_sift_indices);
        normal_est.setInputCloud(source);
        normal_est.setSearchMethod(tree);
        normal_est.setKSearch(10);
        
        normal_est.compute(*source_sift_normal);
        cout<<"sources normal is : "<<source_sift_normal->size()<<endl;
        
        normal_est.setIndices(target_sift_indices);
        normal_est.setInputCloud(target);
        normal_est.compute(*target_sift_normal);
        cout<<"target normal is : "<<target_sift_normal->size()<<endl;

        /*需要将fpfh计算时，需要将pcl::PointCloud<> 转化为pcl::Pointcloud<>::Ptr*/
        pointcloud::Ptr input_source (new pointcloud);
        pointcloud::Ptr input_target (new pointcloud);
        input_source = source_sift.makeShared();
        input_target = target_sift.makeShared();
        
       
        //计算点云的fpfh特征估计
        fpfhFeature::Ptr source_fpfh (new fpfhFeature);
        fpfhFeature::Ptr target_fpfh (new fpfhFeature);
        
        pcl::FPFHEstimationOMP<pcl::PointXYZ,pcl::Normal,pcl::FPFHSignature33> est_fpfh;
        est_fpfh.setNumberOfThreads(10);
        est_fpfh.setInputCloud(input_source);
        est_fpfh.setInputNormals(source_sift_normal);
        est_fpfh.setSearchMethod(tree);

        est_fpfh.setKSearch(10);
        est_fpfh.compute(*source_fpfh);

        est_fpfh.setInputCloud(input_target);
        est_fpfh.setInputNormals(target_sift_normal);
        est_fpfh.compute(*target_fpfh);
        

        /*
        //计算粗配中对应点
        pcl::registration::CorrespondenceEstimation<pcl::FPFHSignature33,pcl::FPFHSignature33> crude_cor_est;
        //  pcl::registration::CorrespondenceEstimation<pcl::PointXYZ,pcl::PointXYZ> crude_cor_est; 
        // pcl::Correspondences cru_correspondences;
        // pcl::CorrespondencesConstPtr cru_correspondences (new pcl::CorrespondencesConstPtr);

        boost::shared_ptr<pcl::Correspondences> cru_correspondences (new pcl::Correspondences);
        crude_cor_est.setInputSource(source_fpfh);
        crude_cor_est.setInputTarget(target_fpfh);
        //  crude_cor_est.determineCorrespondences(cru_correspondences);
        crude_cor_est.determineReciprocalCorrespondences(*cru_correspondences);
        cout<<"crude size is:"<<cru_correspondences->size()<<endl;
        */
        //错误对应关系去除
        /* 
        pcl::registration::CorrespondenceRejectorFeatures rejector;
        //   rejector.setInputCorrespondences(cru_correspondences);
        rejector.setSourceFeature<pcl::FPFHSignature33>(source_fpfh,"fpfh_source");
        rejector.setTargetFeature<pcl::FPFHSignature33>(target_fpfh,"fpfh_target");
        rejector.setDistanceThreshold<pcl::FPFHSignature33>(100.0,"dist") ;
        pcl::DefaultPointRepresentation<pcl::FPFHSignature33>::ConstPtr PointRepPtr (new pcl::DefaultPointRepresentation<pcl::FPFHSignature33>) ;
       rejector.setFeatureRepresentation<pcl::FPFHSignature33>(PointRepPtr, "Rep") ;
       std::cout << "Valid : " << rejector.hasValidFeatures() << endl ; //This return 0 
        //  pcl::CorrespondencesConstPtr cru (new pcl::Correspondences);
        pcl::Correspondences cru; 
        //   rejector.applyRejection(cru);
        rejector.getCorrespondences(cru);
        cout<<"错误对应关系去除后 crude size is:"<<cru.size()<<endl;
        
*/
        /*
        pcl::registration::CorrespondenceRejectorSampleConsensus<pcl::PointXYZ> rejector;
        pcl::Correspondences cru;  
        rejector.setInputSource(source);
        rejector.setInputTarget(target);
        rejector.setInputCorrespondences(cru_correspondences);
        //rejector.setMaximumIterations(100);
        rejector.setInlierThreshold(1100);
         cout<<"错误对应关系去除后 crude size is:"<<cru.size()<<endl;
        rejector.getCorrespondences(cru);
        cout<<"错误对应关系去除后 crude size is:"<<cru_correspondences->size()<<endl;
        */
        
        

        //对齐(占用了大部分运行时间)
        pcl::SampleConsensusInitialAlignment<pcl::PointXYZ, pcl::PointXYZ, pcl::FPFHSignature33> sac_ia;
        sac_ia.setInputSource(input_source);
        sac_ia.setSourceFeatures(source_fpfh);
        sac_ia.setInputTarget(input_target);
        sac_ia.setTargetFeatures(target_fpfh);
        pointcloud::Ptr align_sift (new pointcloud);
        //  sac_ia.setNumberOfSamples(20);  //设置每次迭代计算中使用的样本数量（可省）,可节省时间
        sac_ia.setCorrespondenceRandomness(6); //设置计算协方差时选择多少近邻点，该值越大，协防差越精确，但是计算效率越低.(可省)
        sac_ia.align(*align_sift); 

        end = clock();
        cout <<"calculate crude registration time is: "<< float (end-start)/CLOCKS_PER_SEC<<endl;
        
        

        float score = sac_ia.getFitnessScore();
        Eigen::Matrix4f transform = Eigen::Matrix4f::Identity();
        transform = sac_ia.getFinalTransformation();
        cout<<"粗配准"<<endl;
        cout<<"score is:  "<<score<<endl;
        cout<<"crude transform matrix is: \n" <<transform<<endl;

        /*对原始点云进行粗变换*/
        pointcloud::Ptr align (new pointcloud);
        pcl::transformPointCloud(*source,*align,transform);
        
        


        
        //精配准
        pcl::IterativeClosestPoint<pcl::PointXYZ,pcl::PointXYZ> icp;
        icp.setInputSource(align);
        icp.setInputTarget(target);
        //  icp.setMaximumIterations(1000);
        //  icp.setTransformationEpsilon(1e-20);
        pointcloud ::Ptr final(new pointcloud);
        //  icp.setMaxCorrespondenceDistance(0.8);
        icp.setEuclideanFitnessEpsilon(0.0000001); //前后两次迭代误差的差值
        icp.align(*final);
        cout<<"\nicp score is:  "<<icp.getFitnessScore()<<endl;
        cout<<"icp transform matrix is:\n"<<icp.getFinalTransformation ()<<endl;
        
        
        all = clock();
        cout <<"all registration time is: "<< float (all-start)/CLOCKS_PER_SEC<<endl;    


        //可视化
        boost::shared_ptr<pcl::visualization::PCLVisualizer> view (new pcl::visualization::PCLVisualizer("fpfh test"));
        int v1;
        int v2;
        
        view->createViewPort(0,0.0,0.5,1.0,v1);
        view->createViewPort(0.5,0.0,1.0,1.0,v2);
        view->setBackgroundColor(0,0,0,v1);
        view->setBackgroundColor(0.05,0,0,v2);
        pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZ> sources_cloud_color(source,250,0,0);
        view->addPointCloud(source,sources_cloud_color,"sources_cloud_v1",v1);
        pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZ> target_cloud_color (target,0,250,0);
        view->addPointCloud(target,target_cloud_color,"target_cloud_v1",v1);
        view->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE,2,"sources_cloud_v1");

        pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZ>aligend_cloud_color(final,255,0,0);
        // view->addPointCloud(align,aligend_cloud_color,"aligend_cloud_v2",v2);
        view->addPointCloud(final,aligend_cloud_color,"aligend_cloud_v2",v2);
        view->addPointCloud(target,target_cloud_color,"target_cloud_v2",v2);
        view->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE,4,"aligend_cloud_v2");
        view->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE,2,"target_cloud_v2");

        //   view->addCorrespondences<pcl::PointXYZ>(source,target,*cru_correspondences,"correspondence",v1);//添加显示对应点对
        while (!view->wasStopped())
        {
                // view->spin();
                view->spinOnce(100);
                boost::this_thread::sleep (boost::posix_time::microseconds (100000));
                  

        }
         pcl::io::savePCDFile ("crou_output.pcd", *align);
         pcl::io::savePCDFile ("final_align.pcd", *final);
         
         
#endif 
         return 0;

}
