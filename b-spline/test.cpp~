#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl/io/pcd_io.h>
#include <pcl/kdtree/kdtree_flann.h>

#include <pcl/visualization/pcl_visualizer.h>
#include <pcl/surface/on_nurbs/fitting_surface_tdm.h>
#include <pcl/surface/on_nurbs/fitting_curve_2d_asdm.h>
#include <pcl/surface/on_nurbs/triangulation.h>
#include <pcl/console/time.h>


typedef pcl::PointXYZ Point;
void
PointCloud2Vector3d (pcl::PointCloud<Point>::Ptr cloud, pcl::on_nurbs::vector_vec3d &data);  //??
void
visualizeCurve(ON_NurbsCurve &curve,ON_NurbsSurface &surface,pcl::visualization::PCLVisualizer &viewer);  //??


using namespace std;

int main(int argc, char **argv)
{

        pcl::console::TicToc time;
        time.tic();
        std::string pcd_file,file_3dm;
        if(argc <2)
        {
                cout<<"input two file: 1.input file.  2. output file "<<endl;
                exit(0);
        }
        pcd_file = argv[1];
        //  file_3dm = argv[2]; //保存输出的b样条曲面（终端输入要保存的名字）
        pcl::visualization::PCLVisualizer viewer ("B-spline");

        pcl::PointCloud<pcl::PointXYZ>::Ptr input_cloud (new pcl::PointCloud<pcl::PointXYZ>);
        pcl::io::loadPCDFile(pcd_file,*input_cloud);
        //  pcl::search::KdTree<pcl::PointXYZ>::Ptr tree (new pcl::search::KdTree<pcl::PointXYZ>());
        pcl::KdTreeFLANN<pcl::PointXYZ> kdtree;
        kdtree.setInputCloud(input_cloud);
        int k = 30;
        vector<int> nnh;
        vector<float> distance;
        kdtree.nearestKSearch(input_cloud->points[30],k,nnh,distance);
        
        pcl::PointCloud<Point>::Ptr cloud(new pcl::PointCloud<Point>);
        
        pcl::copyPointCloud<pcl::PointXYZ>(*input_cloud,nnh,*cloud);
        
        
        //读取数据
        printf("loading %s\n",pcd_file.c_str());
       
        pcl::on_nurbs::NurbsDataSurface data;   //nurbs 对象
        //   pcl::io::loadPCDFile(pcd_file,*cloud);
        PointCloud2Vector3d (input_cloud, data.interior); //将点 以矩阵的形式表示
        pcl::visualization::PointCloudColorHandlerCustom<Point> handler (cloud,0,255,0);
        viewer.addPointCloud<Point> (cloud,handler,"cloud_cyliner");
        
        cout<<"points size is:"<<cloud->size()<<endl;

        //fit b-spline surface

        //参数
        unsigned order (3); //B杨条曲面的多项式的阶数
        unsigned refinement (5); //细化次数？
        unsigned iterations (10); //细化执行之后的迭代次数
        unsigned mesh_resolution(300); //默认200  //各参数方向的定点个数，用于B杨条曲面的三角刨分
        
        pcl::on_nurbs::FittingSurface::Parameter params;
        params.interior_smoothness = 0.5; //内部 ，平滑。表面内部平整度
        params.interior_weight = 1.0; //表面内部优化权重
        params.boundary_smoothness = 0.2;  //表面边界平滑度
        params.boundary_weight = 0.0; //表面边界优化的权重

        //初始化
        cout<<"surface fitting ...\n"<<endl;
        ON_NurbsSurface nurbs = pcl::on_nurbs::FittingSurface::initNurbsPCABoundingBox(order,&data);
        pcl::on_nurbs::FittingSurface fit(&data,nurbs);
        
        //可视化网格
        pcl::PolygonMesh mesh;
        pcl::PointCloud<Point>::Ptr mesh_cloud (new pcl::PointCloud<pcl::PointXYZ>);
        vector<pcl::Vertices> mesh_vertices;
        string mesh_id = "mesh_nurbs";
        pcl::on_nurbs::Triangulation::convertSurface2PolygonMesh(fit.m_nurbs,mesh,mesh_resolution);
        viewer.addPolygonMesh(mesh,mesh_id);

        //surface refinement 。表面细化
        for (unsigned i = 0; i < refinement; i++)
        {
                fit.refine (0);
                fit.refine (1);
                fit.assemble (params);
                fit.solve ();
                pcl::on_nurbs::Triangulation::convertSurface2Vertices (fit.m_nurbs, mesh_cloud, mesh_vertices, mesh_resolution);
                viewer.updatePolygonMesh<pcl::PointXYZ> (mesh_cloud, mesh_vertices, mesh_id);
                viewer.spinOnce ();
        }

        //最终曲面拟合
        for (unsigned i = 0; i < iterations; i++)
        {
                fit.assemble (params);
                fit.solve ();
                pcl::on_nurbs::Triangulation::convertSurface2Vertices (fit.m_nurbs, mesh_cloud, mesh_vertices, mesh_resolution);
                viewer.updatePolygonMesh<pcl::PointXYZ> (mesh_cloud, mesh_vertices, mesh_id);
                viewer.spinOnce ();
        }

         // fit B-spline curve

        // parameters
        pcl::on_nurbs::FittingCurve2dAPDM::FitParameter curve_params;
        curve_params.addCPsAccuracy = 5e-2;
        curve_params.addCPsIteration = 3;
        curve_params.maxCPs = 200;
        curve_params.accuracy = 1e-3;
        curve_params.iterations = 100;

        curve_params.param.closest_point_resolution = 0;
        curve_params.param.closest_point_weight = 1.0;
        curve_params.param.closest_point_sigma2 = 0.1;
        curve_params.param.interior_sigma2 = 0.00001;
        curve_params.param.smooth_concavity = 1.0;
        curve_params.param.smoothness = 1.0;
        
  
         // initialisation (circular)
        printf ("  curve fitting ...\n");
        pcl::on_nurbs::NurbsDataCurve2d curve_data;
        curve_data.interior = data.interior_param;
        curve_data.interior_weight_function.push_back (true);
        ON_NurbsCurve curve_nurbs = pcl::on_nurbs::FittingCurve2dAPDM::initNurbsCurve2D (order, curve_data.interior);

        
        // curve fitting
        pcl::on_nurbs::FittingCurve2dASDM curve_fit (&curve_data, curve_nurbs);
        // curve_fit.setQuiet (false); // enable/disable debug output
        curve_fit.fitting (curve_params);
        visualizeCurve (curve_fit.m_nurbs, fit.m_nurbs, viewer);
        
        // ############################################################################
        // triangulation of trimmed surface
        
        printf ("  triangulate trimmed surface ...\n");
        viewer.removePolygonMesh (mesh_id);
        pcl::on_nurbs::Triangulation::convertTrimmedSurface2PolygonMesh (fit.m_nurbs, curve_fit.m_nurbs, mesh,
                                                                         mesh_resolution);
        viewer.addPolygonMesh (mesh, mesh_id);

        viewer.addPointCloud (input_cloud,"input");
                
        cout<<"time is :" <<time.toc()/1000<<"s"<<endl;
        
        /*
        // save trimmed B-spline surface
        if ( fit.m_nurbs.IsValid() )
        {
                ONX_Model model;
                ONX_Model_Object& surf = model.m_object_table.AppendNew();
                surf.m_object = new ON_NurbsSurface(fit.m_nurbs);
                surf.m_bDeleteObject = true;
                surf.m_attributes.m_layer_index = 1;
                surf.m_attributes.m_name = "surface";
                
                ONX_Model_Object& curv = model.m_object_table.AppendNew();
                curv.m_object = new ON_NurbsCurve(curve_fit.m_nurbs);
                curv.m_bDeleteObject = true;
                curv.m_attributes.m_layer_index = 2;
                curv.m_attributes.m_name = "trimming curve";

                model.Write(file_3dm.c_str());
                printf("  model saved: %s\n", file_3dm.c_str());
        }  
        */
        printf ("  ... done.\n");
        
        viewer.spin ();
        return 0;

}
void PointCloud2Vector3d (pcl::PointCloud<Point>::Ptr cloud, pcl::on_nurbs::vector_vec3d &data)
{
        for (unsigned i = 0;i < cloud->size();i++)
        {
                Point &p = cloud->at(i);
                if (!pcl_isnan (p.x) && !pcl_isnan (p.y) && !pcl_isnan (p.z)){
                        data.push_back(Eigen::Vector3d(p.x,p.y,p.z));
                }       
        }
}

void visualizeCurve(ON_NurbsCurve &curve, ON_NurbsSurface &surface, pcl::visualization::PCLVisualizer &viewer)
{
        pcl::PointCloud<pcl::PointXYZRGB>::Ptr curve_cloud (new pcl::PointCloud<pcl::PointXYZRGB>);
        
        pcl::on_nurbs::Triangulation::convertCurve2PointCloud (curve, surface, curve_cloud, 4);
        for (std::size_t i = 0; i < curve_cloud->size () - 1; i++)
        {
                pcl::PointXYZRGB &p1 = curve_cloud->at (i);
                pcl::PointXYZRGB &p2 = curve_cloud->at (i + 1);
                std::ostringstream os;
                os << "line" << i;
                viewer.removeShape (os.str ());
                viewer.addLine<pcl::PointXYZRGB> (p1, p2, 1.0, 0.0, 0.0, os.str ());
        }
        
        pcl::PointCloud<pcl::PointXYZRGB>::Ptr curve_cps (new pcl::PointCloud<pcl::PointXYZRGB>);
        for (int i = 0; i < curve.CVCount (); i++)
        {
                ON_3dPoint p1;
                curve.GetCV (i, p1);
                
                double pnt[3];
                surface.Evaluate (p1.x, p1.y, 0, 3, pnt);
                pcl::PointXYZRGB p2;
                p2.x = float (pnt[0]);
                p2.y = float (pnt[1]);
                p2.z = float (pnt[2]);
                
                p2.r = 255;
                p2.g = 0;
                p2.b = 0;
                
                curve_cps->push_back (p2);
        }
        viewer.removePointCloud ("cloud_cps");
        viewer.addPointCloud (curve_cps, "cloud_cps");
}
